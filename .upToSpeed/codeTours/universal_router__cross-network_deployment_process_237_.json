{"title":"Universal Router: Cross-Network Deployment Process","id":"HF6rux07F5XQxKZ16Z4uEYZ7ZbLrfE6om1xLlXye7GU=","steps":[{"type":"textOnly","description":"Welcome to the Universal Router Deployment Process tour. In this tour, we'll explore how the Universal Router is deployed across various networks. We'll focus on the deployment scripts, network-specific parameters, and the overall structure of the deployment process.","title":"","id":"2238"},{"type":"revealFiles","files":["script/DeployUniversalRouter.s.sol"],"description":"Let's start by examining the main deployment script, DeployUniversalRouter.s.sol. This script serves as the foundation for deploying the Universal Router across different networks.","title":"","id":"2248"},{"type":"highlight","description":"The DeployUniversalRouter contract is an abstract contract that inherits from the Forge Script contract. It defines the core structure and variables needed for the deployment process.","file":"script/DeployUniversalRouter.s.sol","highlight":[{"start":13,"end":21}],"title":"","id":"2249"},{"type":"highlight","description":"The `run()` function in DeployUniversalRouter orchestrates the entire deployment process. It handles the deployment of Permit2 if necessary, sets up the RouterParameters, and deploys the UniversalRouter contract.","file":"script/DeployUniversalRouter.s.sol","highlight":[{"start":23,"end":67}],"title":"","id":"2250"},{"type":"highlight","description":"The `run()` function in DeployUniversalRouter orchestrates the entire deployment process. It uses RouterParameters, a crucial struct that defines addresses for various protocols and services integrated with the Universal Router.\n\nKey RouterParameters include:\n- permit2: Address for the Permit2 contract, crucial for token approvals.\n- weth9: Wrapped Ether address, essential for ETH <-> WETH conversions.\n- seaportV1_5 and seaportV1_4: Addresses for different versions of the Seaport NFT marketplace protocol.\n- v2Factory and v3Factory: Addresses for Uniswap V2 and V3 factory contracts.\n\nThe `run()` function:\n1. Deploys Permit2 if not already deployed.\n2. Sets up an UnsupportedProtocol contract for unsupported features.\n3. Initializes RouterParameters, mapping unsupported protocols.\n4. Logs all parameters for verification.\n5. Finally deploys the UniversalRouter with the configured parameters.\n\nThis process ensures that the UniversalRouter is deployed with the correct configuration for the target network, supporting various protocols and services as needed.","file":"script/DeployUniversalRouter.s.sol","highlight":[{"start":23,"end":76}],"title":"","id":"2240"},{"type":"revealFiles","files":["contracts/base/RouterImmutables.sol"],"description":"Now, let's look at the RouterParameters struct in RouterImmutables.sol. This struct defines all the addresses and parameters needed for the Universal Router deployment.","title":"","id":"2241"},{"type":"revealFiles","files":["script/deployParameters/DeployMainnet.s.sol"],"description":"Let's examine the DeployMainnet.s.sol script as an example of how network-specific parameters are set for deployment.","title":"","id":"2242"},{"type":"highlight","description":"The `setUp()` function in DeployMainnet initializes RouterParameters with Ethereum mainnet-specific addresses. This configuration is crucial for network-specific deployments.\n\nNetwork-specific parameters affect deployment by determining which protocols are supported. For instance, mainnet supports a wide range of protocols, including Seaport, OpenSea, NFTX, and various NFT marketplaces. In contrast, other networks like Arbitrum (as seen in DeployArbitrum.s.sol) support fewer protocols, with many marked as UNSUPPORTED_PROTOCOL.\n\nThese differences arise due to the availability and popularity of protocols on each network. Mainnet, being the primary Ethereum network, hosts most protocols. Other networks may lack certain protocols or use different addresses for shared protocols (e.g., WETH9).\n\nThese network-specific configurations ensure that the Universal Router functions correctly on each network, interacting only with supported protocols and using the appropriate contract addresses.","file":"script/deployParameters/DeployMainnet.s.sol","highlight":[{"start":8,"end":33}],"title":"","id":"2243"},{"type":"revealFiles","files":["script/deployParameters/DeployArbitrum.s.sol"],"description":"Let's compare the mainnet deployment with the Arbitrum deployment script to see how parameters differ for different networks.","title":"","id":"2244"},{"type":"revealFiles","files":["contracts/deploy/UnsupportedProtocol.sol"],"description":"The UnsupportedProtocol contract plays a crucial role in the Universal Router's cross-network deployment strategy. Let's examine its implementation and understand its purpose:\n\n1. Purpose: This contract serves as a safety mechanism for protocols not supported on specific networks.\n\n2. Implementation: It's a simple contract that always reverts when called, preventing accidental interactions with unsupported protocols.\n\n3. Security Enhancement: By mapping unsupported protocol addresses to this contract, the Universal Router ensures that any attempted interactions with these protocols will fail safely, rather than potentially executing unintended operations.\n\n4. Network Flexibility: This approach allows the Universal Router to maintain a consistent interface across all networks while adapting to network-specific protocol support.\n\nNote how this contract interacts with the 'mapUnsupported' function we saw earlier in the deployment script. This combination allows for flexible, secure deployments across various networks with differing protocol support.","title":"","id":"2245"},{"type":"revealFiles","files":["deploy-addresses/mainnet.json"],"description":"After deployment, the contract addresses are stored in JSON files for each network. Let's look at the mainnet.json file as an example.","title":"","id":"2246"},{"type":"textOnly","description":"To conclude our tour of the Universal Router deployment process, let's recap the key components and add some practical advice:\n\n1. The DeployUniversalRouter script handles core deployment logic.\n2. Network-specific scripts set appropriate parameters for each network.\n3. RouterParameters configure necessary addresses and settings.\n4. UnsupportedProtocol contract manages unsupported features on certain networks.\n5. Deployed addresses are stored in JSON files for reference.\n\nPractical Deployment Advice:\n- Always use a testnet first to verify your deployment configuration.\n- Double-check all addresses in the RouterParameters for accuracy.\n- Ensure you have sufficient gas for deployment, especially on congested networks.\n\nPotential Challenges:\n- Network congestion may cause deployment failures; be prepared to adjust gas settings.\n- Some protocols may update their contracts, requiring RouterParameters updates.\n\nVerification Best Practices:\n- Use block explorers to verify contract deployment and correct parameter setting.\n- Test basic router functionality immediately after deployment.\n- Compare deployed addresses with expected values in the JSON files.\n\nThis modular approach enables efficient multi-network deployment while accommodating network-specific requirements and supported protocols.","title":"","id":"2247"}]}