{"title":"Contributing to Universal Router: Process and Standards","id":"mhKBhRcv1HEnEmuHxuQTfnyDFpEiXr7FXSr6W9z0tuc=","steps":[{"type":"textOnly","description":"Welcome to the tour on the contribution process for the Universal Router project! In this tour, we'll explore how to contribute to the project, including submitting pull requests and adhering to coding standards. Let's begin by understanding the importance of contributions and the overall process.","title":"","id":"2174"},{"type":"revealFiles","files":["README.md"],"description":"The README.md file emphasizes the importance of reading the contribution guidelines before submitting a pull request. This ensures that contributors are aware of the project's standards and expectations.","title":"","id":"2192"},{"type":"highlight","description":"Before submitting a pull request, contributors should follow these steps to ensure code quality and consistency:","file":"README.md","highlight":[{"start":216,"end":229}],"title":"","id":"2193"},{"type":"revealFiles","files":[".github/workflows/test.yml"],"description":"The project uses GitHub Actions to automate the testing process. Let's examine the test.yml file to understand how tests are run for each pull request:","title":"","id":"2194"},{"type":"revealFiles","files":[".github/workflows/lint.yml"],"description":"In addition to testing, the project also uses automated linting. Let's look at the lint.yml file to see how the linting process is set up:","title":"","id":"2195"},{"type":"revealFiles","files":[".prettierrc"],"description":"The project uses Prettier for code formatting. Let's examine the .prettierrc file to understand the specific formatting rules:","title":"","id":"2196"},{"type":"revealFiles","files":["hardhat.config.ts"],"description":"The hardhat.config.ts file defines the development environment configuration. Let's take a look at its contents:","title":"","id":"2197"},{"type":"highlight","description":"Here we can see the specific steps contributors should follow before submitting a pull request. These steps ensure code quality and consistency.","file":"README.md","highlight":[{"start":216,"end":229}],"title":"","id":"2176"},{"type":"revealFiles","files":[".github/workflows/test.yml"],"description":"Let's examine the automated processes that ensure code quality in the Universal Router project. The project uses Continuous Integration (CI) workflows defined in GitHub Actions to automatically test and lint code contributions.\n\nThe test.yml file defines the automated testing process:\n\n- It runs on every push to the main branch and on pull requests.\n- The workflow sets up the environment, installs dependencies, compiles the code, and runs integration tests.\n- It uses an Infura API key for testing, which is stored as a GitHub secret for security.\n\nThe lint.yml file defines the automated linting process:\n\n- It also runs on pushes to main and pull requests.\n- This workflow sets up the environment, installs dependencies (including Foundry), builds the project, and runs the linter.\n- The linter helps maintain consistent code style across the project.\n\nThese automated processes help maintain code quality and consistency, making it easier for contributors to submit high-quality pull requests that meet the project's standards.","title":"","id":"2177"},{"type":"revealFiles","files":[".github/workflows/lint.yml"],"description":"Next, we'll look at the linting process defined in the lint.yml file.","title":"","id":"2178"},{"type":"revealFiles","files":[".prettierrc"],"description":"Let's examine the .prettierrc file to understand the code formatting rules used in this project. These rules ensure consistency across all contributions.\n\nThe .prettierrc file defines three key formatting rules:\n1. 'semi: false' - Omit semicolons at the end of statements\n2. 'singleQuote: true' - Use single quotes for strings\n3. 'printWidth: 120' - Set the maximum line length to 120 characters\n\nBefore submitting a pull request, run 'yarn prettier:fix' to automatically apply these formatting rules to your code. This ensures your contribution adheres to the project's style guidelines and maintains code consistency.\n\nConsistent formatting is crucial in collaborative projects as it improves readability and reduces merge conflicts. By following these rules, you contribute to a more maintainable codebase.","title":"","id":"2179"},{"type":"textOnly","description":"Let's recap the contribution process for the Universal Router project and outline how you can get started:\n\n1. Familiarize yourself with the project:\n   - Read the README.md file for an overview and contribution guidelines.\n   - Understand the project structure and coding standards.\n\n2. Set up your development environment:\n   - Clone the repository with submodules.\n   - Install dependencies and set up the .env file.\n\n3. Make your changes:\n   - Create a new branch for your feature or bug fix.\n   - Write clean, well-documented code adhering to the project's style guide.\n\n4. Test your changes:\n   - Run 'yarn test:all' to ensure all tests pass and update gas snapshots.\n   - Use 'yarn prettier:fix' to lint and format your code.\n\n5. Submit a Pull Request (PR):\n   - Push your changes to your fork on GitHub.\n   - Create a new PR with a clear title and description of your changes.\n   - Reference any related issues in your PR description.\n\n6. Respond to feedback:\n   - Be prepared to make changes based on reviewer comments.\n   - Keep your PR updated with the latest main branch changes.\n\nRemember, quality contributions are valued. Start with small, manageable changes to\nfamiliarize yourself with the process. Don't hesitate to ask questions in the project's\ncommunication channels. Happy contributing!","title":"","id":"2181"}]}